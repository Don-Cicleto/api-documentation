FORMAT: 1A
HOST: https://doncicleto-stagging.herokuapp.com

# Don Cicleto API
This document reports Don Cicleto API.

NOTE: This document is **in progress**.

## Authentication & Authorization

### Authentication Methods

The Don Cicleto API uses token-based authentication for mobile applications. All authenticated requests must include the authentication token in the request headers.

#### Authentication Token
```
Authorization: Token token=<USER_AUTH_TOKEN>
```

#### Required Headers
All API requests must include the following headers:
- `Content-Type: application/json`
- `Authorization: Token token=<USER_AUTH_TOKEN>`

#### Authentication Flow
1. User provides credentials (email/password)
2. System validates credentials and returns authentication token
3. Client stores token and includes it in all subsequent requests
4. Token is automatically generated when user account is created

### Authorization Levels

The system uses Rolify gem for role management. For mobile API access, only specific roles are exposed for security reasons:

#### **user** (Default Role)
- Default role assigned automatically to new users
- Access to core mobile app functionalities:
  - Profile management
  - Bookings (reservations)
  - Subscriptions
  - Credit cards
  - Bicycle management

#### **maintenance** (Special Role)
- Special role for maintenance operations
- Access to maintenance-specific functionalities from mobile app
- Enhanced permissions for system maintenance tasks

**Note**: Administrative roles (super_admin, owner, admin, read_only, partner_basic, partner_advanced) are not exposed in the mobile API for security and separation of responsibilities.

### Multi-Tenancy

The system supports multi-tenancy. Administrative roles have different scopes:
- `super_admin`: Complete access across all tenants
- `owner`: Full access within their specific tenant
- `admin`: Administrative permissions within tenant boundaries

### Error Responses

Authentication and authorization errors return standard HTTP status codes:

#### **401 Unauthorized**
- Missing or invalid authentication token
- Expired authentication session

```json
{
  "error": "Unauthorized access",
  "message": "Invalid or missing authentication token"
}
```

#### **403 Forbidden**
- Valid authentication but insufficient permissions
- Access denied to specific resource

```json
{
  "errors": [
    {
      "title": "Access denied",
      "detail": "You do not have access to this resource"
    }
  ]
}
```

### Security Best Practices

1. **Token Storage**: Store authentication tokens securely on mobile devices
2. **Token Transmission**: Always use HTTPS for API communications
3. **Role Separation**: Administrative roles are not exposed in mobile API
4. **Permission Checks**: Each endpoint validates user permissions based on assigned roles
5. **Automatic Token Generation**: Authentication tokens are generated automatically upon user creation

## Error Handling & Validation

### HTTP Status Codes Used

- `200 OK`: Successful operations
- `201 Created`: Resource creation (bookings, subscriptions)
- `400 Bad Request`: Missing required parameters
- `403 Forbidden`: Unauthorized access or insufficient permissions
- `404 Not Found`: Resource not found
- `422 Unprocessable Entity`: Validation errors
- `503 Service Unavailable`: External API failures

### Error Response Format

Standard JSON error format used throughout the API:

```json
{
  "errors": [
    {
      "title": "Error title",
      "detail": "Error details",
      "source": {
        "pointer": "data/attributes/field-name"
      }
    }
  ]
}
```

Simple error format:
```json
{
  "error": "Error message"
}
```

### Validation Rules

#### **User Validations**
- `email`: Required, unique per tenant, valid email format
- `password`: Required with confirmation, minimum length per Devise configuration
- `email_confirmation`: Required on user creation
- **Partner roles**: Must have at least one parking assigned (error: "debe tener al menos un parking seleccionado")

#### **Booking Validations**
- `parking_id`: Required
- `user_id`: Required
- `space_id`: Required

#### **Subscription Validations**
- `plan_id`: Required
- `user_id`: Required

#### **Parking Validations**
- `parking_type`: Must be between 1-6
- `door_type`: Must be between 0-6
- `lock_mac`: Required if door type is Bluetooth
- `lock_id`: Required if door type is Omnitec
- `uab_apikey`, `uab_expiration`: Required if door type is UpAndBike
- `southco_access_code`: Required if door type is Southco
- `ppu_splits`: Must be valid JSON with numeric keys and values

#### **Credit Card Validations**
- `provider`: Required
- `merchant_identifier`: Must be unique per provider and user

### Common Business Logic Errors

#### **Booking Errors**
```json
{ "error": "Parkins has not free spaces" }
```
```json
{ "error": "You already have an ongoing booking" }
```
```json
{ "error": "User not found" }
```

#### **Payment Errors**
```json
{ "error": "Active credit card not found" }
```

### Multi-Tenant Validation

All models use tenant scoping (`acts_as_tenant`). Data access is automatically scoped by tenant, and attempting to access resources outside the user's tenant will result in 404 or 403 errors.

# API Structure
When making requests to the API, the server's response will have a determined format. The following shows the schema of the responses.

+ `data (object)` - Object containing API's response. It could be an object or an array, depending on the request.
    + `type (string)` - Shows what type of information is contained in the response.
    + `id (number)` - Identifying number for the given resource of a certain `type`.
    + `attributes (object)` - Contains the information itself from the request.
    + `links (object)` - Contains some references to the resource itself.
        + `self (string)` - Link to request the resource itself.
    + `relationships (object)` - Information about related resources for the main resource.
        + `Resource type`
            + `data (object)` - Contains the first two attributes from this same schema.
+ `included (object/array)` - Contains the objects referenced in the relationships.

Aside from the reponse format, every request done to the server will need a **public key** associated to the client.

# Group Bikes
Users can add bicycles to their profile.

## Bike [/api/v1/bikes/{bike_id}]
+ Attributes (object)
    + name (string) - Name of the bike
    + brand (string) - Brand of the bike
    + model (string) - Model of the bike
    + photo (string) - Photo of the bike
    + purchase-date (string) - Year of purchase
    + price (string) - Price of the bike
    + `created-at` (string) - Timestamp of creation of a bike
    + `updated-at` (string) - Timestamp of update of a bike

### Retrieve Bike information [GET]
Get information for a given bike.

+ Parameters
    + bike_id (number) - ID of the bike
   
+ Response 200 (application/json)
    + Body
           
            {
                "data": {
                    "type": "bikes",
                    "id": "<BIKE_ID>",
                    "attributes": {
                        "user": {
                            "id": <USER_ID>,
                            "email": "pablobikes@doncicleto.com",
                            "name": "Pablo",
                            "surname": "Rosa Casado",
                            "member": null,
                            "address": "Calle de Pe√±afiel 17",
                            "phone": "647816274",
                            "avatar": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/thumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/minithumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                }
                            },
                            "credits": "0.0"
                        },
                        "name": "Bici Azul",
                        "brand": "VARIO",
                        "model": "MX12",
                        "photo": {
                            "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/419/bici1.jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/419/thumb_bici1.jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/419/minithumb_bici1.jpg"
                            }
                        },
                        "purchase-date": "2006",
                        "price": "502.0"
                    },
                    "links": {
                        "self": "/api/v1/bikes/<BIKE_ID>"
                    }
                }
            }

### Modify all the information for a bike [PUT]
Modify all the information for a given bike.
Using Content-Type: multipart/form-data.

+ Parameters
    + bike_id (number) - ID of the bike
   
+ Request (application/json)
    + Body
           
            {
                "name": "Bici Sava2",
                "brand": "Sava",
                "model": "RN122",
                "photo": <FILE>,
                "purchase-date": "2006",
                "price": "502.0"
            }

+ Response 200

            {
                "data": {
                    "type": "bikes",
                    "id": "<BIKE_ID>",
                    "attributes": {
                        "user": {
                            "id": <USER_ID>,
                            "email": "pablobikes@doncicleto.com",
                            "name": "Pablo",
                            "surname": "Rosa Casado",
                            "member": null,
                            "address": "Calle de Pe√±afiel 17",
                            "phone": "647816274",
                            "avatar": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/thumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/minithumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                }
                            },
                            "credits": "0.0"
                        },
                        "name": "Bici Sava",
                        "brand": "Sava",
                        "model": "RN122",
                        "photo": {
                            "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/418/sava(2).jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/418/thumb_sava(2).jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/418/minithumb_sava(2).jpg"
                            }
                        },
                        "purchase-date": "2006",
                        "price": 502.0
                    },
                    "links": {
                        "self": "/api/v1/bikes/<BIKE_ID>"
                    }
                }
            }

### Delete a bike [DELETE]
Delete a given bike.

+ Parameters
    + bike_id (number) - ID of the bike

+ Response 200

### Create a new bike [POST]
Using Content-Type: multipart/form-data.

+ Request (application/json)
    + Body
       
            {
                "name": "Bici Amarilla",
                "brand": "Shimano",
                "model": "Mountain X",
                "photo": <FILE>,
                "purchase-date": "2010",
                "price": "540.0"
            }

+ Response 201 (application/json)
    + Body
           
            {
                "data": {
                    "type": "bikes",
                    "id": "<BIKE_ID>",
                    "attributes": {
                        "user": {
                            "id": <USER_ID>,
                            "email": "pablobikes@doncicleto.com",
                            "name": "Pablo",
                            "surname": "Rosa Casado",
                            "member": null,
                            "address": "Calle de Pe√±afiel 17",
                            "phone": "647816274",
                            "avatar": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/thumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/minithumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                }
                            },
                            "credits": "0.0"
                        },
                        "name": "Bici Amarilla",
                        "brand": "Shimano",
                        "model": "Mountain X",
                        "photo": {
                            "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/421/bici1.jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/421/thumb_bici1.jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/421/minithumb_bici1.jpg"
                            }
                        },
                        "purchase-date": "2010",
                        "price": 540.0
                    },
                    "links": {
                        "self": "/api/v1/bikes/<BIKE_ID>"
                    }
                }
            }

## Collection of bikes [/api/v1/bikes]
### Retrieve all bikes [GET]

+ Response 200 (application/json)
    + Body
   
            {
                "data": [
                    {
                        "type": "bikes",
                        "id": "<BIKE_ID>",
                        "attributes": {
                            "user": {
                                "avatar": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg",
                                    "thumb": {
                                        "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/thumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                    },
                                    "minithumb": {
                                        "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/user/avatar/1/minithumb_rn_image_picker_lib_temp_44c32731-e450-4d62-acab-072cce7c70db.jpg"
                                    }
                                },
                                "id": <USER_ID>,
                                "email": "pablobikes@doncicleto.com",
                                "name": "Pablo",
                                "surname": "Rosa Casado",
                                "member": null,
                                "address": "Calle de Pe√±afiel 17",
                                "phone": "647816274",
                                "credits": "0.0"
                            },
                            "name": "Bici Azul",
                            "brand": "BMW",
                            "model": "XR 14",
                            "photo": {
                                "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/408/Captura_de_pantalla_2020-12-14_a_las_6.30.05__2_.png",
                                "thumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/408/thumb_Captura_de_pantalla_2020-12-14_a_las_6.30.05__2_.png"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.eu-west-1.amazonaws.com/uploads/bike/foto/408/minithumb_Captura_de_pantalla_2020-12-14_a_las_6.30.05__2_.png"
                                }
                            },
                            "purchase-date": "2018",
                            "price": 2000.0
                        },
                        "links": {
                            "self": "/api/v1/bikes/<BIKE_ID>"
                        }
                    },
                    ...
                ]
            }

# Group Bookings
This are the resources associated to bookings of parking spaces.

## Booking [/api/v1/bookings/{booking_id}]
+ Attributes (object)
    + `created-at` (string) - Timestamp of creation of a booking
    + `closed-at` (string) - Timestamp of cancellation of a booking
    + price (string) - Price of the booking stringified
    + space-code (string) - Number of the parking spot
    + keycode (string) - In case of a numeric pad door, the keycode to access
    + `booking-code` (string) - Code used to create the booking

### Retrieve Booking information [GET]
Get information for a given booking.

+ Parameters
    + booking_id (number) - ID of the booking
   
+ Response 200 (application/json)
    + Body
           
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "created-at": "2017-09-16T11:32:45.519+02:00",
                        "closed-at": "2017-09-16T11:33:21.503+02:00",
                        "price": "0.5",
                        "space-code": "75",
                        "keycode": "1084777#"
                    },
                    "relationships": {
                        "parking": {
                            "data": {
                                "type": "parkings",
                                "id": "<PARKING_ID>"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "<BOOKING_ID>"
                            }
                        }
                    }
                },
                "included": [
                    ...
                ]
            }

### Modify partial information for a booking [PATCH]
Modify some attributes for a given booking.

+ Parameters
    + booking_id (number) - ID of the booking
   
+ Request (application/json)
    + Body
           
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "price": "0.5",
                        "space-code": "75",
                        "keycode": "1084777#"
                    },
                    "relationships": {
                        "parking": {
                            "data": {
                                "type": "parkings",
                                "id": "<PARKING_ID>"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "<BOOKING_ID>"
                            }
                        }
                    }
                }
            }

+ Response 200

### Modify all the information for a booking [PUT]
Modify all the information for a given booking.

+ Parameters
    + booking_id (number) - ID of the booking
   
+ Request (application/json)
    + Body
           
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "created-at": "2017-09-16T11:32:45.519+02:00",
                        "closed-at": "2017-09-16T11:33:21.503+02:00",
                        "price": "0.5",
                        "space-code": "75",
                        "keycode": "1084777#"
                    },
                    "relationships": {
                        "parking": {
                            "data": {
                                "type": "parkings",
                                "id": "<PARKING_ID>"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "<BOOKING_ID>"
                            }
                        }
                    }
                }
            }

+ Response 200

### Delete a booking [DELETE]
Delete a given booking.

+ Parameters
    + booking_id (number) - ID of the booking

+ Response 200

### Assign a New Space to a Booking [GET /api/v1/bookings/{booking_id}/new_space]
Assign a new available space to an existing booking. Only the booking owner can perform this action.

+ Parameters
    + booking_id (number) - ID of the booking

+ Response 201 (application/json)
    + Body
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "created-at": "<TIMESTAMP>",
                        "closed-at": null,
                        "price": "0.0",
                        "space-code": "70",
                        "keycode": "5357844#"
                    },
                    "relationships": {
                        "parking": { "data": { "type": "parkings", "id": "<PARKING_ID>" } },
                        "space": { "data": { "type": "spaces", "id": "<SPACE_ID>" } }
                    }
                }
            }
+ Response 403 (application/json)
    + Body
            { "user": "not_authorized" }
+ Response 404 (application/json)
    + Body
            { "booking": "not_found" }
+ Response 422 (application/json)
    + Body
            { "parking": "not_spaces" }

### Close a Booking [PUT /api/v1/bookings/{booking_id}/close]
Close an open booking. This will release the space and finalize the booking.

+ Parameters
    + booking_id (number) - ID of the booking

+ Response 200 (application/json)
    + Body
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "closed-at": "<TIMESTAMP>",
                        "price": "0.0",
                        "space-code": "70",
                        "keycode": "5357844#"
                    },
                    "relationships": {
                        "parking": { "data": { "type": "parkings", "id": "<PARKING_ID>" } },
                        "space": { "data": { "type": "spaces", "id": "<SPACE_ID>" } }
                    }
                }
            }
+ Response 403 (application/json)
    + Body
            { "errors": [{ "title": "Access denied", "detail": "You do not have access to this resource" }] }
+ Response 404 (application/json)
    + Body
            { "booking": "not_found" }
+ Response 422 (application/json)
    + Body
            { "booking": "already_closed" }

### Get Free Spaces for Bookings [GET /api/v1/bookings/free_spaces]
Retrieve a list of free spaces available for bookings for the current user.

+ Parameters
    + id (number, optional) - Parking ID (if required by implementation)

+ Response 200 (application/json)
    + Body
            {
                "data": [
                    {
                        "type": "spaces",
                        "id": "<SPACE_ID>",
                        "attributes": {
                            "fixed": false,
                            "number": "12",
                            "reserved": false
                        },
                        "relationships": {
                            "parking": { "data": { "type": "parkings", "id": "<PARKING_ID>" } }
                        }
                    }
                ]
            }
+ Response 200 (application/json)
    + Body
            { "error": "No free spaces available" }
+ Response 400/404/500 (application/json)
    + Body
            { "error": "<error message>", "message": "<details>" }

### Update the Space of a Booking [PUT /api/v1/bookings/{booking_id}/update_space]
Change the assigned space of an existing booking.

+ Parameters
    + booking_id (number) - ID of the booking

+ Request (application/json)
    + Body
            {
                "data": {
                    "attributes": {
                        "action-event": {
                            "command": "update-space",
                            "data": {
                                "parking-id": "<PARKING_ID>",
                                "space-id": "<NEW_SPACE_ID>"
                            }
                        }
                    }
                }
            }
+ Response 200 (application/json)
    + Body
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "created-at": "<TIMESTAMP>",
                        "closed-at": null,
                        "price": "0.0",
                        "space-code": "70",
                        "keycode": "5357844#"
                    },
                    "relationships": {
                        "parking": { "data": { "type": "parkings", "id": "<PARKING_ID>" } },
                        "space": { "data": { "type": "spaces", "id": "<SPACE_ID>" } }
                    }
                }
            }
+ Response 404 (application/json)
    + Body
            { "error": "No available or not a free space with ID <space_id>" }
+ Response 403 (application/json)
    + Body
            { "errors": [{ "title": "Access denied", "detail": "You do not have access to this resource" }] }

### Get Free Spaces for Specific Booking [GET /api/v1/bookings/{booking_id}/free_spaces]
Retrieve available spaces for a specific booking. This endpoint is used when a booking needs to be reassigned to a different space.

+ Parameters
    + booking_id (number) - ID of the booking

+ Response 200 (application/json)
    + Body
    
            {
                "data": [
                    {
                        "type": "spaces",
                        "id": "45",
                        "attributes": {
                            "fixed": false,
                            "number": "12",
                            "reserved": false,
                            "available": true,
                            "parking-id": "23"
                        },
                        "relationships": {
                            "parking": {
                                "data": {
                                    "type": "parkings",
                                    "id": "23"
                                }
                            }
                        }
                    },
                    {
                        "type": "spaces",
                        "id": "46",
                        "attributes": {
                            "fixed": false,
                            "number": "13",
                            "reserved": false,
                            "available": true,
                            "parking-id": "23"
                        },
                        "relationships": {
                            "parking": {
                                "data": {
                                    "type": "parkings",
                                    "id": "23"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/json)
    + Body
    
            {
                "errors": [
                    {
                        "title": "Booking not found",
                        "detail": "The booking could not be found or you don't have access to it",
                        "status": "404"
                    }
                ]
            }

+ Response 200 (application/json)
    + Body
    
            {
                "data": [],
                "message": "No free spaces available for this booking"
            }

## Collection of bookings [/api/v1/bookings]
### Retrieve all bookings [GET]

+ Response 200 (application/json)
    + Body
   
            {
                "data": [
                    {
                        "type": "bookings",
                        "id": "<BOOKING_ID>",
                        "attributes": {
                            "created-at": "2017-09-16T11:32:45.519+02:00",
                            "closed-at": "2017-09-16T11:33:21.503+02:00",
                            "price": "0.5",
                            "space-code": "75",
                            "keycode": "1084777#"
                        },
                        "relationships": {
                            "parking": {
                                "data": {
                                    "type": "parkings",
                                    "id": "<PARKING_ID>"
                                }
                            },
                            "space": {
                                "data": {
                                    "type": "spaces",
                                    "id": "<BOOKING_ID>"
                                }
                            }
                        }
                    },
                    ...
                ],
                "included": [
                    ...
                ]
            }

### Create a new booking [POST]

+ Request (application/json)
    + Body
       
            {
                "data": {
                    "attributes": {
                        "space-code": null,
                        "closed-at": null,
                        "price": null,
                        "created-at": null,
                        "booking-code": null,
                        "keycode": null
                    },
                    "relationships": {
                        "parking": {
                            "data": {
                                "type": "parkings",
                                "id": "<PARKING_ID>"
                            }
                        },
                        "user": {
                            "data": {
                                "type": "users",
                                "id": "<USER_ID>"
                            }
                        }
                    },
                    "type": "bookings"
                }
            }

+ Response 201 (application/json)
    + Body
           
            {
                "data": {
                    "type": "bookings",
                    "id": "<BOOKING_ID>",
                    "attributes": {
                        "created-at": "<TIMESTAMP>",
                        "closed-at": null,
                        "price": "0.0",
                        "space-code": "70",
                        "keycode": "5357844#"
                    },
                    "relationships": {
                        "parking": {
                            "data": {
                                "type": "parkings",
                                "id": "<PARKING_ID>"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "<SPACE_ID>"
                            }
                        }
                    }
                },
                "included": [
                ...
                ]
            }

# Group Notification
## Bive Notification [POST /api/v1/bive/notification]
This endpoint is used to send to the server the information regarding the result of a payment. Whenever a payment is finished, the information should be sent to the server to make the necessary changes to the subscriptions or the vouchers.

**NOTE**: this is a sample for future conversation, and is subject to change.

+ Request (application/json)
    + Body
            
            {
                "payment-token": "<TOKEN>",
                "signature": "<SIGNATURE>",
                "code": null,
                "description": null,
                "success": true
            }
            
+ Response 200 (application/json)

# Group Spaces

## Space Notification [/api/v1/spaces/{space_id}/notify-iclotet]
### Notify iClotet System [GET]
Send notification to the iClotet system about space status. This endpoint is used for integration with external parking management systems.

+ Parameters
    + space_id (number) - ID of the space

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "message": "Notification sent successfully",
                "space_id": "45",
                "timestamp": "2024-07-16T15:30:00Z"
            }

+ Response 404 (application/json)
    + Body
    
            {
                "errors": [
                    {
                        "title": "Not found",
                        "detail": "Space not found"
                    }
                ]
            }

# Group Parkings
A parking is a specific lovation in which Don Cicleto keeps user's bicycles.

## Parking [/api/v1/parkings/{parking_id}]
+ Attributes (object)
    + acceso (string) - Information about certain parking access
    + advertencias (string) - Information about a parking warnings
    + `alquiler-bici` (boolean) - Whether this parking rents bicycles
    + `dias-cerrados` (string) - Week dyas when the parking is closed
    + `email-contacto` (string) - Contact email for the parking manager
    + info (string) - General information about the parking
    + nombre (string) - Parking name
    + `parking-type` (number) - Type of parking
    + `door-type` (number) - Type of door. It could be 0, 1 or 2 to refer to a parking without access restriction, with a numpad or with Bluetooth lock, respectivelly
    + `lock-mac` (string) - MAC address for the Bluetooth receiver, for those doors with Bluetooth
    + `free-fixed-spaces` (number) - Amount of parkings available for subscriptions
    + `plazas-totales` (number) - Total number of parking spaces
    + `telefono-contacto` (string) - Phone number for the parking manager
    + address (string) - Parking address
    + latitude (number) - Parking latitude
    + longitude (number) - Parking longitude
    + `address-locality` (string) - Location of the parking, formatted as `(latitude, longitude)`
    + `parking-lot-price` (number) - Price for a parking lot
    + image (object) - Addresses to different images
        + url (string) - Link to original image
        + normal (object)
            + url (string) - Link to normal sized image
        + thumb (object)
            + url (string) - Link to thumbnail image
        + `mini_thumb` (object)
            + url (string) - Link to mini-thumbnail image
        + image (object) - Copy of the same object (legacy)
    + `free-spaces` (number) - Number of free spaces in a parking
    + `month-price` (number) - Monthly price for a parking
    + `battery-level` (number) - Battery level percentage for smart lock system
    + `battery-level-updated-at` (string) - Timestamp of last battery level update
    + `access-control` (boolean) - Whether access control is enabled
    + `charging-point` (boolean) - Whether the parking has a charging point
    + `smart-lock` (boolean) - Whether the parking has smart lock technology
    + `spot-type` (string) - Type of parking spot (covered, outdoor, etc.)
    + `ppu-price-splits` (object) - Pay-per-use pricing structure
    + `can-use` (boolean) - Whether the current user can use this parking

### Retrieve information about a parking [GET]
This endpoint allows requests to get information about a parking.

+ Parameters
    + parking_id (number) - Identification number for a parking

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "type": "parkings",
                    "id": "23",
                    "attributes": {
                        "acceso": "24h",
                        "advertencias": null,
                        "alquiler-bici": null,
                        "dias-cerrados": null,
                        "email-contacto": null,
                        "info": "Situado en la primera planta. El Parking San Clemente se encuentra en Calle Felipe Sanclemente 8 de Zaragoza. Situado al lado de la zona m√°s comercial de la ciudad, a tan solo 250 metros de El Corte Ingl√©s y a 300 metros de Plaza de Arag√≥n. \r\n",
                        "nombre": "Felipe Sanclemente 8 (ZARAGOZA)",
                        "parking-type": 1,
                        "door-type": 0,
                        "lock-mac": null,
                        "free-fixed-spaces": 1,
                        "plazas-totales": null,
                        "telefono-contacto": "609260717",
                        "address": "Calle Felipe San Clemente 8",
                        "latitude": 41.6495782,
                        "longitude": -0.8820205,
                        "address-locality": "41.6495782, -0.8820205",
                        "parking-lot-price": null,
                        "image": {
                            "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/Sanclemente.JPG",
                            "normal": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/normal_Sanclemente.JPG"
                            },
                            "thumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/thumb_Sanclemente.JPG"
                            },
                            "mini_thumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/mini_thumb_Sanclemente.JPG"
                            },
                            "image": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/Sanclemente.JPG",
                                "normal": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/normal_Sanclemente.JPG"
                                },
                                "thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/thumb_Sanclemente.JPG"
                                },
                                "mini_thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/23/mini_thumb_Sanclemente.JPG"
                                }
                            }
                        },
                        "free-spaces": 1,
                        "month-price": null,
                        "battery-level": 85,
                        "battery-level-updated-at": "2024-07-16T15:30:00Z",
                        "access-control": true,
                        "charging-point": false,
                        "smart-lock": true,
                        "spot-type": "covered",
                        "ppu-price-splits": {
                            "first-hour": 1.5,
                            "additional-hours": 1.0
                        },
                        "can-use": true
                    },
                    "links": {
                        "self": "/api/v1/parkings/23"
                    }
                }
            }

### Unlock a parking [POST /api/v1/parkings/{parking_id}/unlock]
In case a parking has a Bluetooth lock, the lock will be unlocked.

+ Parameters
    + parking_id (number) - Identification number for a parking

+ Request (application/json)
    + Body

            {
                "session": "<SESSION IDENTIFIER>"
            }

+ Response 200 (application/json)
    + Body

            {
                "result": "success",
                "message": "Command successfully completed",
                "error_code": 0,
                "data": {
                    "commands": "COMMAND_STRING_HERE"
                },
                "token": "TOKEN_HERE",
                "request": "unlock"
            }

### Get iLOQ Security Code [GET /api/v1/parkings/{parking_id}/iloq_security]
Retrieve the iLOQ security code for accessing smart locks. This endpoint is used for parkings with iLOQ integration.

+ Parameters
    + parking_id (number) - Identification number for a parking

+ Response 200 (application/json)
    + Body

            {
                "result": "success",
                "message": "Security code retrieved successfully",
                "error_code": 0,
                "data": {
                    "security_code": "123456",
                    "expires_at": "2024-07-16T20:00:00Z",
                    "lock_id": "iloq_lock_123"
                },
                "request": "iloq_security"
            }

+ Response 404 (application/json)
    + Body

            {
                "result": "error",
                "message": "Parking not found or iLOQ not configured",
                "error_code": 404,
                "data": null,
                "request": "iloq_security"
            }

+ Response 403 (application/json)
    + Body

            {
                "result": "error",
                "message": "User does not have access to this parking",
                "error_code": 403,
                "data": null,
                "request": "iloq_security"
            }

### Update Battery Level [POST /api/v1/parkings/{parking_id}/battery_level]
Update the battery level for a parking's smart lock system. This endpoint is used by IoT devices to report battery status.

+ Parameters
    + parking_id (number) - Identification number for a parking

+ Request (application/json)
    + Body

            {
                "battery_level": 85,
                "device_id": "sensor_123",
                "timestamp": "2024-07-16T15:30:00Z"
            }

+ Response 200 (application/json)
    + Body

            {
                "result": "success",
                "message": "Battery level updated successfully",
                "error_code": 0,
                "data": {
                    "battery_level": 85,
                    "updated_at": "2024-07-16T15:30:00Z",
                    "status": "good"
                },
                "request": "battery_level"
            }

+ Response 422 (application/json)
    + Body

            {
                "result": "error",
                "message": "Invalid battery level data",
                "error_code": 422,
                "data": {
                    "errors": [
                        "Battery level must be between 0 and 100"
                    ]
                },
                "request": "battery_level"
            }


## Collection of parkings [/api/v1/parkings]
These are the options to retrieve multiple parkings.

### Retrieve all parkings [GET]
This endpoints enables to retrieve all the parkings available.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "type": "parkings",
                        "id": "30",
                        "attributes": {
                            "acceso": "L-D de 10:00 a 14:00 -16:00 20:00 ",
                            "advertencias": null,
                            "alquiler-bici": null,
                            "dias-cerrados": null,
                            "email-contacto": null,
                            "info": "Tienda de bicis cl√°sicas cerca de la playa de la Nova Mar Bella, el 22@ y el casco antiguo de Poble Nou.\r\nPregunta por las plazas de Don Cicleto y Gonzalo, su propietario, te atender√° encantado.",
                            "nombre": "Bcn Classic Rides (Barcelona)",
                            "parking-type": 1,
                            "door-type": 0,
                            "lock-mac": null,
                            "free-fixed-spaces": 0,
                            "plazas-totales": null,
                            "telefono-contacto": "93 853 96 57 / 744400546",
                            "address": "calle Dr. Trueta 202 Barcelona 08005",
                            "latitude": 41.3979302,
                            "longitude": 2.2029612,
                            "address-locality": "41.397925, 2.202983",
                            "parking-lot-price": "19.99",
                            "image": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/fachada_BCN.jpg",
                                "normal": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/normal_fachada_BCN.jpg"
                                },
                                "thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/thumb_fachada_BCN.jpg"
                                },
                                "mini_thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/mini_thumb_fachada_BCN.jpg"
                                },
                                "image": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/fachada_BCN.jpg",
                                    "normal": {
                                        "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/normal_fachada_BCN.jpg"
                                    },
                                    "thumb": {
                                        "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/thumb_fachada_BCN.jpg"
                                    },
                                    "mini_thumb": {
                                        "url": "https://doncicleto.s3.amazonaws.com/uploads/parking/image/30/mini_thumb_fachada_BCN.jpg"
                                    }
                                }
                            },
                            "free-spaces": 1,
                            "month-price": "19.99"
                        },
                        "links": {
                            "self": "/api/v1/parkings/30"
                        }
                    },
                    ...
                ]
            }

# Group Subscriptions
These are the resources related to subscriptions. A subscription is an object that identifies a monthly booking of a space in Don Cicleto. These subscriptions are renewed automatically every month.

## Subscription [/api/v1/subscriptions/{subscription_id}]
+ Attributes (object)
    + actived (boolean) - Shows whether a subscription is active or not
    + `created-at` (string) - Timestamp for the creation of a subscription
    + `updated-at` (string) - Timestamp for the last update of a subscription
    + `promotional-code` (string) - The promotional code used when purchasing the subscription
    + license (string) - Link to the license SVG
    + `show-license` (boolean) - Whether a license needs to be shown
    + `paymill-id` (string) - (Legacy) Paymill identification code
    + keycode (number) - For the parkings with keycode, the number a user needs to put
    + `finish-at` (string) - When a subscription ends
    + `finished-at` (string) - When a subscription was cancelled by the user
    + amount (string) - Price of the subscription
    + total (string) - Total price of a subscription, including discounts


### Retrieve a subscription [GET]
Returns the information for a subscription.

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Response 200 (application/json)
    + Body

            {
                "data": {
                    "type": "subscriptions",
                    "id": "971",
                    "attributes": {
                        "actived": false,
                        "created-at": "2021-02-11T09:29:05.157Z",
                        "updated-at": "2021-02-16T17:57:43.111Z",
                        "promotional-code": null,
                        "license": "http://res.cloudinary.com/hrxua5b0v/image/upload/v1613035784/wr8myqidspxhxf8mdk3f.jpg",
                        "show-license": true,
                        "paymill-id": null,
                        "keycode": 999999,
                        "finish-at": "2021-03-11",
                        "finished-at": "2021-02-16T17:57:43.099Z",
                        "amount": "19.99",
                        "total": "19.99"
                    },
                    "links": {
                        "self": "/api/v1/subscriptions/971"
                    },
                    "relationships": {
                        "user": {
                            "data": {
                                "type": "users",
                                "id": "1681"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "164"
                            }
                        }
                    }
                }
            }

### Update parts of a subscription [PATCH]
Allows for changes in some of a subscription attributes

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Request (application/json)
    + Body

            {
                "subscription": {
                    "attribute": "<VALUE>"
                }
            }

+ Response 200 (application/json)

### Update all attributes of a subscription [PUT]
Allows for a full change in a subscription attributes

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Request (application/json)
    + Body

            {
                "subscription": {
                    "actived": false,
                    "created-at": "2021-02-11T09:29:05.157Z",
                    "updated-at": "2021-02-16T17:57:43.111Z",
                    "promotional-code": null,
                    "license": "http://res.cloudinary.com/hrxua5b0v/image/upload/v1613035784/wr8myqidspxhxf8mdk3f.jpg",
                    "show-license": true,
                    "paymill-id": null,
                    "keycode": 999999,
                    "finish-at": "2021-03-11",
                    "finished-at": "2021-02-16T17:57:43.099Z",
                    "amount": "19.99",
                    "total": "19.99"
                }
            }

+ Response 200 (application/json)

### Delete subscription [DELETE]
Remove a subscription from the server

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Response 200 (application/json)

### Get Free Fixed Spaces for Subscription [GET /api/v1/subscriptions/{subscription_id}/free_spaces]
Retrieve available fixed spaces for a subscription. This endpoint is used when a subscription needs to be assigned to a different space.

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Response 200 (application/json)
    + Body

            {
                "data": [
                    {
                        "type": "spaces",
                        "id": "67",
                        "attributes": {
                            "fixed": true,
                            "number": "A-15",
                            "reserved": false,
                            "available": true,
                            "parking-id": "28"
                        },
                        "relationships": {
                            "parking": {
                                "data": {
                                    "type": "parkings",
                                    "id": "28"
                                }
                            }
                        }
                    },
                    {
                        "type": "spaces",
                        "id": "68",
                        "attributes": {
                            "fixed": true,
                            "number": "A-16",
                            "reserved": false,
                            "available": true,
                            "parking-id": "28"
                        },
                        "relationships": {
                            "parking": {
                                "data": {
                                    "type": "parkings",
                                    "id": "28"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/json)
    + Body

            {
                "errors": [
                    {
                        "title": "Subscription not found",
                        "detail": "The subscription could not be found or you don't have access to it",
                        "status": "404"
                    }
                ]
            }

+ Response 200 (application/json)
    + Body

            {
                "data": [],
                "message": "No free fixed spaces available for this subscription"
            }

### Update Subscription Space [PUT /api/v1/subscriptions/{subscription_id}/update_space]
Change the assigned space of an existing subscription. This allows users to move their subscription to a different parking space.

+ Parameters
    + subscription_id (number) - Identification number for a subscription

+ Request (application/json)
    + Body

            {
                "data": {
                    "attributes": {
                        "action-event": {
                            "command": "update-space",
                            "data": {
                                "parking-id": "28",
                                "space-id": "67"
                            }
                        }
                    }
                }
            }

+ Response 200 (application/json)
    + Body

            {
                "data": {
                    "type": "subscriptions",
                    "id": "971",
                    "attributes": {
                        "actived": true,
                        "created-at": "2024-01-15T09:29:05.157Z",
                        "updated-at": "2024-07-16T15:45:00.000Z",
                        "promotional-code": null,
                        "license": "http://res.cloudinary.com/hrxua5b0v/image/upload/v1705312784/license_971.jpg",
                        "show-license": true,
                        "paymill-id": null,
                        "keycode": 161031,
                        "finish-at": "2024-08-15",
                        "finished-at": null,
                        "amount": "19.99",
                        "total": "19.99"
                    },
                    "links": {
                        "self": "/api/v1/subscriptions/971"
                    },
                    "relationships": {
                        "user": {
                            "data": {
                                "type": "users",
                                "id": "1681"
                            }
                        },
                        "space": {
                            "data": {
                                "type": "spaces",
                                "id": "67"
                            }
                        }
                    }
                }
            }

+ Response 404 (application/json)
    + Body

            {
                "errors": [
                    {
                        "title": "Space not available",
                        "detail": "The requested space is not available or not found",
                        "status": "404"
                    }
                ]
            }

+ Response 403 (application/json)
    + Body

            {
                "errors": [
                    {
                        "title": "Access denied",
                        "detail": "You do not have access to this subscription",
                        "status": "403"
                    }
                ]
            }

## Collection of subscriptions [/api/v1/users/{user_id}/subscriptions]
Informaci√≥n relacionada con todas las suscripciones de un usuario.

### Retrieve all subscriptions [GET]
Returns information about a user subscriptions.

+ Parameters
    + user_id (number) - ID del usuario

+ Response 200 (application/json)
    + Body

            {
                "data": [
                    {
                        "type": "subscriptions",
                        "id": "971",
                        "attributes": {
                            "actived": false,
                            "created-at": "2021-02-11T09:29:05.157Z",
                            "updated-at": "2021-02-16T17:57:43.111Z",
                            "promotional-code": null,
                            "license": "http://res.cloudinary.com/hrxua5b0v/image/upload/v1613035784/wr8myqidspxhxf8mdk3f.jpg",
                            "show-license": true,
                            "paymill-id": null,
                            "keycode": 161031,
                            "finish-at": "2021-03-11",
                            "finished-at": "2021-02-16T17:57:43.099Z",
                            "amount": "19.99",
                            "total": "19.99"
                        },
                        "links": {
                            "self": "/api/v1/subscriptions/971"
                        },
                        "relationships": {
                            "user": {
                                "data": {
                                    "type": "users",
                                    "id": "1681"
                                }
                            },
                            "space": {
                                "data": {
                                    "type": "spaces",
                                    "id": "164"
                                }
                            }
                        }
                    },
                    ...
                ],
                "included": [
                    {...},
                    ...
                ]
            }

### Create a new subscription [POST /api/v1/subscriptions]
Allows for the creation of a subscription.

+ Request (application/json)
    + Body

            {
                "data":{
                    "attributes":{
                        "actived":false,
                        "promotional-code":null,
                        "finish-at":null,
                        "finished-at":null,
                        "license":null,
                        "action-event":{
                            "command":"assign-space",
                            "data":{
                                "parking-id":"28"
                            }
                        },
                        "amount":null,
                        "total":null
                    },
                    "type":"subscriptions"
                }
            }

+ Response 200 (application/json)

# Group Transactions
These objects relate to a payment order, with or without quantity. These payments are sent to a payment platform like Redsys, and the response will change these objects automatically.

## Transaction [/api/v1/transactions/{transaction_id}]
+ Attributes (object)
    + `url-ok` (string) - (Redsys) URL to return when a payment is successful
    + `url-ko` (string) - (Redsys) URL to return when a payment failed for some reason
    + `payment-token` (string) - Token to identify the payment
    + signature (string) - Generated signature to send to Redsys and validate the order
    + `error-code` (string) - Redsys error code for the order
    + `error-description` (string) - Redsys error description
    + success (boolean) - Whether a transaction was successful or not
    + updated-at (string) - Timestamp for the last update

### Retrieve a transaction [GET]
Return a certain transaction given the ID

+ Parameters
    + transaction_id (number) - Transaction identifying number

+ Response 200 (application/json)
    + Body

            {
                "test": "OK"
            }

### Modify a transaction [PUT]
Allows for a change in all attributes of a transaction

+ Parameters
    + transaction_id (number) - Transaction identifying number
    
+ Request (application/json)
    + Body

            {
                "data": {
                    "id": "1007",
                    "attributes": {
                        "url-ok": "<DOMAIN>/app/profile/license/1039",
                        "url-ko": "<DOMAIN>/app/book/parking/28/subscription?trans=1007",
                        "payment-token": "<TOKEN>",
                        "signature": "<SIGNATURE>",
                        "error-code": null,
                        "error-description": null,
                        "success": false,
                        "action-event": {
                            "command": "start-process",
                            "data": {}
                        }
                    },
                    "relationships": {
                        "subscription": {
                            "data": {
                                "type":"subscriptions",
                                "id":"1039"
                            }
                        },
                        "credit-card": {
                            "data": {
                                "type":"credit-cards",
                                "id":"675"
                            }
                        },
                        "voucher": {
                            "data":null
                        }
                    },
                    "type":"transactions"
                }
            }

+ Response 200 (application/json)

### Delete a transaction [DELETE]
Removes a certain transaction from the database

+ Parameters
    + transaction_id (number) - Transaction identifying number

+ Response 204

## Additional Transaction Actions [/api/v1/transactions]
### Create transaction [POST]
Create a new transaction for processing payments or vouchers. This endpoint maps to `create_transaction` action.

+ Request (application/json)
    + Body
    
            {
                "data": {
                    "type": "transactions", 
                    "attributes": {
                        "amount": "15.00",
                        "payment_method": "stripe",
                        "voucher_id": "123",
                        "description": "Credit purchase"
                    }
                }
            }

+ Response 201 (application/json)
    + Body
    
            {
                "data": {
                    "type": "transactions",
                    "id": "456",
                    "attributes": {
                        "amount": "15.00",
                        "status": "pending",
                        "payment_method": "stripe",
                        "created_at": "2024-07-16T15:30:00Z",
                        "voucher_id": "123"
                    }
                }
            }

## Transaction Storage [/api/v1/transactions/{transaction_id}]
### Store transaction [DELETE]
Store or finalize a transaction. This endpoint maps to the `store` action despite using DELETE method.

+ Parameters
    + transaction_id (number) - Transaction identifying number

+ Response 200 (application/json)
    + Body
    
            {
                "data": {
                    "type": "transactions",
                    "id": "456",
                    "attributes": {
                        "status": "stored",
                        "stored_at": "2024-07-16T15:35:00Z"
                    }
                }
            }

### Start process [PUT]
Start the payment processing for a transaction. This endpoint maps to the `start_process` action.

+ Parameters
    + transaction_id (number) - Transaction identifying number

+ Request (application/json)
    + Body
    
            {
                "data": {
                    "type": "transactions",
                    "attributes": {
                        "action": "start_process"
                    }
                }
            }

+ Response 200 (application/json)
    + Body
    
            {
                "data": {
                    "type": "transactions",
                    "id": "456",
                    "attributes": {
                        "status": "processing",
                        "process_started_at": "2024-07-16T15:40:00Z",
                        "payment_url": "https://payment.gateway.com/process/456"
                    }
                }
            }

+ Parameters
    + transaction_id (number) - Transaction identifying number
    
+ Response 200 (application/json)

## Collection of transactions [/api/v1/transactions]
These are the possibilities for a group of transactions.

### Create a new transaction [POST]
Allows for the creation of a new transaction.

+ Request (application/json)
    + Body

            {
                "data": {
                    "id": "1007",
                    "attributes": {
                        "url-ok": "<DOMAIN>/app/profile/license/1039",
                        "url-ko": "<DOMAIN>/app/book/parking/28/subscription?trans=1007",
                        "payment-token": "<TOKEN>",
                        "signature": "<SIGNATURE>",
                        "error-code": null,
                        "error-description": null,
                        "success": false,
                        "action-event": {
                            "command": "start-process",
                            "data": {}
                        }
                    },
                    "relationships": {
                        "subscription": {
                            "data": {
                                "type":"subscriptions",
                                "id":"1039"
                            }
                        },
                        "credit-card": {
                            "data": {
                                "type":"credit-cards",
                                "id":"675"
                            }
                        },
                        "voucher": {
                            "data":null
                        }
                    },
                    "type":"transactions"
                }
            }

+ Response 200 (application/json)

# Group Users
This is the object that identifies a user in our application.

## User [/api/v1/users/{user_id}]
+ Attributes (object)
    + email (string) - User's email
    + member (number) - Membership identification
    + name (string) - Name of the user
    + surname (string) - Surname(s) of the user
    + phone (string) - Phone number for user
    + address (string) - Address of residence of the user
    + credits (string) - Number of credits stringified
    + avatar (object) - Similar to image of parkings
    + `expiration-close` (boolean) - Whether the expiration date is close for the user
    + roles (array) - User roles in the system
    + parkings (array) - Parkings accessible to the user
    + locale (string) - User's preferred language

### Retrieve information for a user [GET]
Retrieve the information for a given user.

+ Parameters
    + user_id (number) - ID number for the user
   
+ Response 200 (application/json)
    + Body
   
            {
                "data": {
                    "type": "users",
                    "id": "<USER_ID>",
                    "attributes": {
                        "email": "carlos.mendez@example.com",
                        "member": "1604",
                        "name": "Carlos",
                        "surname": "M√©ndez Garc√≠a",
                        "phone": "+34612345678",
                        "address": "Calle Gran V√≠a 42, 28013 Madrid",
                        "credits": "25.50",
                        "expiration-close": false,
                        "roles": ["user", "maintenance"],
                        "parkings": [
                            {
                                "id": "12",
                                "name": "Estaci√≥n de Atocha (Madrid)",
                                "access": "granted"
                            },
                            {
                                "id": "24",
                                "name": "Plaza Catalunya (Barcelona)",
                                "access": "granted"
                            }
                        ],
                        "locale": "en",
                        "avatar": {
                            "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                            },
                            "avatar": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                                }
                            }
                        },
                        "expiration-close": false
                    },
                    "links": {
                        "self": "/api/v1/users/<USER_ID>"
                    },
                    "relationships": {
                        "subscriptions": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/subscriptions",
                                "related": "/api/v1/users/<USER_ID>/subscriptions"
                            }
                        },
                        "credit-cards": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/credit-cards",
                                "related": "/api/v1/users/<USER_ID>/credit-cards"
                            }
                        }
                    }
                }
            }

### Update some information for a user [PATCH]
Update some of the information for the user.

+ Parameters
    + user_id (number) - ID number for the user
   
+ Request (application/json)
    + Body
   
            {
                "data": {
                    "type": "users",
                    "id": "<USER_ID>",
                    "attributes": {
                        "email": "<EMAIL>",
                        "name": "<NAME>",
                        "surname": "<SURNAME>",
                        "phone": "123456",
                        "address": null,
                    },
                    "links": {
                        "self": "/api/v1/users/<USER_ID>"
                    },
                    "relationships": {
                        "subscriptions": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/subscriptions",
                                "related": "/api/v1/users/<USER_ID>/subscriptions"
                            }
                        },
                        "credit-cards": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/credit-cards",
                                "related": "/api/v1/users/<USER_ID>/credit-cards"
                            }
                        }
                    }
                }
            }

+ Response 200 (application/json)

### Update all the information for a user [PUT]
Update all of the information for the user.

+ Parameters
    + user_id (number) - ID number for the user
   
+ Request (application/json)
    + Body
   
            {
                "data": {
                    "type": "users",
                    "id": "<USER_ID>",
                    "attributes": {
                        "email": "<EMAIL>",
                        "member": "1604",
                        "name": "<NAME>",
                        "surname": "<SURNAME>",
                        "phone": "123456",
                        "address": null,
                        "credits": "50.0",
                        "avatar": {
                            "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                            },
                            "avatar": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                                }
                            }
                        },
                        "expiration-close": false
                    },
                    "links": {
                        "self": "/api/v1/users/<USER_ID>"
                    },
                    "relationships": {
                        "subscriptions": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/subscriptions",
                                "related": "/api/v1/users/<USER_ID>/subscriptions"
                            }
                        },
                        "credit-cards": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/credit-cards",
                                "related": "/api/v1/users/<USER_ID>/credit-cards"
                            }
                        }
                    }
                }
            }

+ Response 200 (application/json)

### Retrieve user subscriptions [GET /api/v1/users/{user_id}/subscriptions]
Get all subscriptions for a given user.

+ Parameters
    + user_id (number) - ID of the user

+ Response 200 (application/json)
    + Body
   
            {
                "data": [
                    {
                        "type": "subscriptions",
                        "id": "<SUBCRIPTION_ID>",
                        "attributes": {
                            ...
                        },
                        "links": {
                            "self": "/api/v1/subscriptions/<SUBCRIPTION_ID>"
                        },
                        "relationships": {
                            "user": {
                                "data": {
                                    "type": "users",
                                    "id": "<USER_ID>"
                                }
                            },
                            "space": {
                                "data": {
                                    "type": "spaces",
                                    "id": "<SPACE_ID>"
                                }
                            }
                        }
                    },
                    ...
                ],
                "included": [
                    ...
                ]
            }

           
### Retrieve user credit cards [GET /api/v1/users/{user_id}/credit-card]
Get the credit card object for a certain user.

+ Parameters
    + user_id (number) - ID of the user
   
+ Response 200 (application/json)
    + Body
   
            {
                "data": [
                    {
                        "type": "credit-cards",
                        "id": "<CREDIT_CARD_ID>",
                        "attributes": {
                            ...
                        },
                        "links": {
                            "self": "/api/v1/credit-cards/<CREDIT_CARD_ID>"
                        }
                    }
                ]
            }

### Update user avatar [POST /api/v1/users/{user_id}/update_avatar]
Update the avatar for the user's profile.

+ Parameters
    + user_id (number) - ID of the user

+ Request (image/png)

+ Response 200 (applicaton/json)
    + Body
   
            {
                "data": {
                    "type": "users",
                    "id": "<USER_ID>",
                    "attributes": {
                        "email": "<EMAIL>",
                        "member": "1604",
                        "name": "<NAME>",
                        "surname": "<SURNAME>",
                        "phone": "123456",
                        "address": null,
                        "credits": "50.0",
                        "avatar": {
                            "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                            "thumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                            },
                            "minithumb": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                            },
                            "avatar": {
                                "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/bike.jpg",
                                "thumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/thumb_bike.jpg"
                                },
                                "minithumb": {
                                    "url": "https://doncicleto.s3.amazonaws.com/uploads/user/avatar/<USER_ID>/minithumb_bike.jpg"
                                }
                            }
                        },
                        "expiration-close": false
                    },
                    "links": {
                        "self": "/api/v1/users/<USER_ID>"
                    },
                    "relationships": {
                        "subscriptions": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/subscriptions",
                                "related": "/api/v1/users/<USER_ID>/subscriptions"
                            }
                        },
                        "credit-cards": {
                            "links": {
                                "self": "/api/v1/users/<USER_ID>/relationships/credit-cards",
                                "related": "/api/v1/users/<USER_ID>/credit-cards"
                            }
                        }
                    }
                }
            }

## Collection of users [/api/v1/users]
### Create a new user [POST /api/v1/registers]
Endpoint to create a new user from the form. The attributes are the different fields in the registration form.
+ Request (application/json)
    + Body
            
            {
                "data": {
                    "attributes": {
                        "name": "<NAME>",
                        "surname": "<SURNAMES>",
                        "phone": "<PHONE NUMBER>",
                        "email": "<EMAIL>",
                        "email-confirmation": "<EMAIL>",
                        "password": "<PASSWORD>",
                        "password-confirmation": "<PASSWORD>",
                        "accepted-policy": true,
                        "accepted-share-data": true
                    },
                    "type": "registers"
                }
            }
            
+ Response 200 (application/json)
    + Body
            
            {}

### Sign in with a user [POST /users/sign_in]
Request to sign in as a user and get the session info in return.
+ Request (application/json)
    + Headers
        
            Accept: application/json
            
    + Body
            
            {
                "user": {
                    "password": "<PASSWORD>",
                    "email": "<EMAIL>"
                }
            }

+ Response 200 (application/json)
    + Body
            
            {
                "token": "<AUTHORIZATION HEADER TOKEN>",
                "email": "<EMAIL>",
                "user_id": <USER ID>
            }


# Group Vouchers
Vouchers are PPU tokens.

## Voucher [/api/v1/vouchers/{voucher_id}]
+ Attributes (object)
    + amount (number) - Quantity of credits purchased
    + `coupon-code` (string) - Whether a coupon code was used for this purchase
    + `coupon-value` (string) - Result of the coupon applied to the purchase
    + payed (boolean) - Whether it has been paid with a new credit card or not

### Retrieve a Voucher [GET]
Get the information from a certain voucher.

+ Parameters
    + voucher_id (number) - ID for the voucher object
   
+ Response 200 (application/json)
    + Body
           
            {
                "data": {
                    "type": "vouchers",
                    "id": "<VOUCHER_ID>",
                    "attributes": {
                        "amount": "10.0",
                        "coupon-code": null,
                        "coupon-value": null,
                        "payed": false
                    },
                    "links": {
                        "self": "/api/v1/vouchers/<VOUCHER_ID>"
                    }
                }
            }

## Collection of Vouchers [/api/v1/vouchers]
### Create a new voucher [POST]
Create a new voucher object for PPU credits.

+ Request (application/json)
    + Body
   
            {
                "data": {
                    "attributes": {
                        "amount": 10,
                        "coupon-code": null
                    },
                    "type": "vouchers"
                }
            }
           
+ Response 200 (application/json)
    + Body
   
            {
                "data": {
                    "type": "vouchers",
                    "id": "<VOUCHER_ID>",
                    "attributes": {
                        "amount": "10.0",
                        "coupon-code": null,
                        "coupon-value": null,
                        "payed": false
                    },
                    "links": {
                        "self": "/api/v1/vouchers/<VOUCHER_ID>"
                    }
                }
            }

# Group Payments

## Generate Braintree Token [POST /api/v1/payments/generate_token]
**‚ö†Ô∏è DEPRECATED**: This endpoint uses the legacy Braintree payment system. Please migrate to Stripe Setup Intents for new implementations. See `/api/v1/credit_cards/setup_intent` for the recommended approach.

+ Response 200 (application/json)
    + Body
            { "token": "<BRAINTREE_TOKEN>" }

## Validate Coupon [POST /api/v1/payments/coupon]
+ Request (application/json)
    + Body
            { "code": "COUPON2024" }
+ Response 200 (application/json)
    + Body
            { "code": "COUPON2024", "isValid": true, "discount": 10 }
+ Response 404 (application/json)
    + Body
            { "code": "COUPON2024", "isValid": false, "discount": "" }

## Braintree Checkout [POST /api/v1/payments/checkout]
**‚ö†Ô∏è DEPRECATED**: This endpoint uses the legacy Braintree payment system. Please migrate to Stripe Payment Intents or Mobile Payment Sessions for new implementations. See `/api/v1/mobile_payments/create_checkout_session` for the recommended approach.

+ Request (application/json)
    + Body
            { "voucher_id": "<VOUCHER_ID>", "nonce": "<NONCE>", "credit_card_id": "<CREDIT_CARD_ID>" }
+ Response 200 (application/json)
    + Body
            { "result": { ... } }
+ Response 422 (application/json)
    + Body
            { "errors": ["Error: ..."] }

# Group Mobile Payments

## Create Stripe Checkout Session [POST /api/v1/mobile_payments/create_checkout_session]
+ Request (application/json)
    + Body
            { "provider": "stripe", "platform": "ios", "success_url": "https://...", "cancel_url": "https://..." }
+ Response 200 (application/json)
    + Body
            {
                "success": true,
                "checkout_url": "https://checkout.stripe.com/...",
                "transaction_id": "<TRANSACTION_ID>",
                "provider": "stripe",
                "requires_action": true
            }
+ Response 200 (application/json)
    + Body
            {
                "success": true,
                "transaction_id": "<TRANSACTION_ID>",
                "provider": "stripe",
                "status": "succeeded",
                "requires_action": false
            }

# Group Payment Methods
These endpoints handle payment method configuration and availability for tenants.

## Payment Methods Collection [/api/v1/payment_methods]
### Get Available Payment Methods [GET]
Retrieve available payment methods for the current tenant. Returns configured payment providers with their status and capabilities.

+ Response 200 (application/json)
    + Body
    
            {
                "data": [
                    {
                        "type": "tenant-payment-methods",
                        "id": "1",
                        "attributes": {
                            "name": "stripe",
                            "provider": "stripe",
                            "enabled": true,
                            "is-default": true,
                            "configured": true,
                            "status": "active",
                            "display-name": "Stripe"
                        }
                    },
                    {
                        "type": "tenant-payment-methods",
                        "id": "2",
                        "attributes": {
                            "name": "redsys",
                            "provider": "redsys",
                            "enabled": true,
                            "is-default": false,
                            "configured": true,
                            "status": "active",
                            "display-name": "Redsys (Spanish Banks)"
                        }
                    }
                ]
            }

# Group Credit Cards

## Collection of Credit Cards [/api/v1/credit_cards]
### Retrieve all credit cards [GET]
Get a list of all credit cards for the current user.

+ Response 200 (application/json)
    + Body
    
            {
                "data": [
                    {
                        "type": "credit_cards",
                        "id": "42",
                        "attributes": {
                            "provider": "stripe",
                            "merchant_identifier": "card_1234567890abcdef",
                            "last_four": "4242",
                            "card_type": "Visa",
                            "expires_month": 12,
                            "expires_year": 2025,
                            "is_default": true,
                            "created_at": "2024-01-15T10:30:00Z"
                        }
                    }
                ]
            }

### Create a credit card [POST]
Add a new credit card for the current user.

+ Request (application/json)
    + Body
    
            {
                "data": {
                    "type": "credit_cards",
                    "attributes": {
                        "provider": "stripe",
                        "payment_method_id": "pm_1234567890abcdef"
                    }
                }
            }

+ Response 201 (application/json)
    + Body
    
            {
                "data": {
                    "type": "credit_cards",
                    "id": "43",
                    "attributes": {
                        "provider": "stripe",
                        "merchant_identifier": "card_1234567890abcdef",
                        "last_four": "4242",
                        "card_type": "Visa",
                        "expires_month": 12,
                        "expires_year": 2025,
                        "is_default": false,
                        "created_at": "2024-07-16T15:45:00Z"
                    }
                }
            }

## Individual Credit Card [/api/v1/credit_cards/{card_id}]
### Retrieve a credit card [GET]
Get details of a specific credit card.

+ Parameters
    + card_id (number) - ID of the credit card

+ Response 200 (application/json)
    + Body
    
            {
                "data": {
                    "type": "credit_cards",
                    "id": "42",
                    "attributes": {
                        "provider": "stripe",
                        "merchant_identifier": "card_1234567890abcdef",
                        "last_four": "4242",
                        "card_type": "Visa",
                        "expires_month": 12,
                        "expires_year": 2025,
                        "is_default": true,
                        "created_at": "2024-01-15T10:30:00Z"
                    }
                }
            }

## Credit Card Deletion [/api/v1/credit-cards/{card_id}]
### Delete a credit card [DELETE]
Remove a credit card from the user's account. Note: This endpoint uses the hyphenated URL format.

+ Parameters
    + card_id (number) - ID of the credit card

+ Response 204

+ Response 404 (application/json)
    + Body
    
            {
                "errors": [
                    {
                        "title": "Not found",
                        "detail": "Credit card not found"
                    }
                ]
            }

# Group Credit Cards (Enhanced)
Enhanced credit card management with modern Stripe integration and secure setup flows.

## Credit Card Setup [/api/v1/credit_cards/setup_intent]
### Create Setup Intent [POST]
Create a Stripe setup intent for secure card registration. This modern approach replaces direct card tokenization with a secure, PCI-compliant flow.

+ Request (application/json)
    + Body
    
            {
                "platform": "ios",
                "success_url": "https://app.doncicleto.com/payment-success",
                "cancel_url": "https://app.doncicleto.com/payment-cancel"
            }

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "client_secret": "seti_1234567890abcdef_secret_abc123",
                "setup_intent_id": "seti_1234567890abcdef",
                "requires_action": false,
                "status": "requires_payment_method"
            }

+ Response 422 (application/json)
    + Body
    
            {
                "errors": [
                    {
                        "title": "Setup Intent Error",
                        "detail": "Unable to create setup intent: Invalid platform specified",
                        "status": "422"
                    }
                ]
            }

## Credit Card Setup Verification [/api/v1/credit_cards/verify_setup]
### Verify Setup Completion [GET]
Verify that a setup intent has been completed successfully and the payment method is ready for use.

+ Parameters
    + setup_intent_id (string) - The setup intent ID to verify

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "status": "succeeded",
                "payment_method_id": "pm_1234567890abcdef",
                "setup_intent_id": "seti_1234567890abcdef",
                "credit_card": {
                    "id": "123",
                    "last_four": "4242",
                    "brand": "visa",
                    "exp_month": 12,
                    "exp_year": 2025,
                    "verified": true
                }
            }

+ Response 400 (application/json)
    + Body
    
            {
                "success": false,
                "error": "Setup intent not found or not completed",
                "status": "requires_payment_method"
            }

## Credit Card Setup Callback [/api/v1/credit_cards/callback]
### Handle Setup Callback [GET]
Handle callback from payment setup completion. This endpoint processes the return from mobile payment flows.

+ Parameters
    + setup_intent (string) - The setup intent ID
    + setup_intent_client_secret (string) - The client secret
    + redirect_status (string) - Status of the redirect (succeeded, failed, etc.)

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "status": "succeeded",
                "message": "Payment method setup completed successfully",
                "redirect_url": "https://app.doncicleto.com/payment-success"
            }

+ Response 400 (application/json)
    + Body
    
            {
                "success": false,
                "error": "Setup failed",
                "message": "Payment method setup could not be completed",
                "redirect_url": "https://app.doncicleto.com/payment-cancel"
            }

# Group Webhooks
Webhook endpoints for processing external payment and system events.

## Stripe Webhooks [/api/v1/webhooks/stripe]
### Process Stripe Webhook [POST]
Handle Stripe webhook events for payment processing, subscription updates, and payment method changes.

**Supported Events:**
- `checkout.session.completed` - Payment checkout completed
- `payment_intent.succeeded` - Payment succeeded
- `payment_intent.processing` - Payment processing
- `payment_intent.payment_failed` - Payment failed
- `setup_intent.succeeded` - Payment method setup completed
- `customer.updated` - Customer information updated

+ Request (application/json)
    + Headers
    
            Stripe-Signature: t=1234567890,v1=abc123def456,v0=old_signature
    
    + Body
    
            {
                "id": "evt_1234567890abcdef",
                "object": "event",
                "type": "payment_intent.succeeded",
                "data": {
                    "object": {
                        "id": "pi_1234567890abcdef",
                        "object": "payment_intent",
                        "amount": 1999,
                        "currency": "eur",
                        "status": "succeeded",
                        "metadata": {
                            "user_id": "123",
                            "transaction_id": "456"
                        }
                    }
                }
            }

+ Response 200 (application/json)
    + Body
    
            {
                "received": true,
                "processed": true,
                "event_id": "evt_1234567890abcdef",
                "event_type": "payment_intent.succeeded"
            }

+ Response 400 (application/json)
    + Body
    
            {
                "received": false,
                "error": "Invalid signature",
                "message": "Webhook signature verification failed"
            }

+ Response 404 (application/json)
    + Body
    
            {
                "received": true,
                "processed": false,
                "error": "Event not supported",
                "event_type": "unsupported.event"
            }

# Group Mobile Payments (Enhanced)
Modern mobile payment processing with deep linking and platform-specific optimizations.

## Mobile Checkout Session [/api/v1/mobile_payments/create_checkout_session]
### Create Mobile Checkout Session [POST]
Create a mobile-optimized payment session with deep linking support for iOS and Android applications.

+ Request (application/json)
    + Body
    
            {
                "provider": "stripe",
                "platform": "ios",
                "voucher_id": "123",
                "success_url": "doncicleto://payment-success",
                "cancel_url": "doncicleto://payment-cancel"
            }

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "checkout_url": "https://checkout.stripe.com/c/pay/cs_test_123#fidkdWxOYHwnc",
                "transaction_id": "789",
                "provider": "stripe",
                "requires_action": true,
                "session_id": "cs_test_123456789abcdef",
                "expires_at": "2024-01-01T01:00:00Z"
            }

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "transaction_id": "789",
                "provider": "stripe",
                "status": "succeeded",
                "requires_action": false,
                "payment_intent_id": "pi_123456789abcdef"
            }

+ Response 422 (application/json)
    + Body
    
            {
                "success": false,
                "errors": [
                    {
                        "title": "Payment Error",
                        "detail": "Invalid voucher or insufficient funds",
                        "status": "422"
                    }
                ]
            }

## Mobile Payment Callback [/api/v1/mobile_payments/callback]
### Handle Mobile Payment Callback [GET]
Process callback from mobile payment completion with deep linking support.

+ Parameters
    + session_id (string) - The checkout session ID
    + payment_intent (string) - The payment intent ID
    + payment_intent_client_secret (string) - The client secret
    + redirect_status (string) - Status of the redirect (succeeded, failed, etc.)

+ Response 200 (application/json)
    + Body
    
            {
                "success": true,
                "status": "succeeded",
                "transaction_id": "789",
                "payment_intent_id": "pi_123456789abcdef",
                "amount": 1999,
                "currency": "eur",
                "redirect_url": "doncicleto://payment-success"
            }

+ Response 400 (application/json)
    + Body
    
            {
                "success": false,
                "error": "Payment failed",
                "message": "Payment could not be processed",
                "redirect_url": "doncicleto://payment-cancel"
            }